name: Apply Terraform, tag and generate release notes

# Only do this on the main branch
on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Setup some environment variables specific to this workflow
env:
  AWS_REGION: "eu-west-1"
  AWS_ACCOUNT: "094555056740"
  AWS_ROLE: "github-actions-datamesh-domains"
  TF_VERSION: "1.5.7"
  TG_VERSION: "0.45.2"
  SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
  SNOWFLAKE_ACCOUNT_ID: ${{ secrets.SNOWFLAKE_ACCOUNT_ID }}
  SNOWFLAKE_USER: "CI_CD"

  # Expose the GCP credentials
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

  # To have access to our repositories we need to ensure that the SSH based auth in our
  # terraform, is rewritten to use HTTP with a PAT.
  W_GITHUB_TOKEN: ${{ secrets.W_GITHUB_TOKEN }}
  INPUT_PRE_EXEC_1: |
    git config --global url."https://oauth2:${W_GITHUB_TOKEN}@github.com/whichdigital".insteadOf "ssh://git@github.com/whichdigital"

# We need some permissions for this workflow.
permissions:
  id-token: write
  contents: read

# Let's get the party started ...
# We're using the terragrunt action: https://github.com/gruntwork-io/terragrunt-action
jobs:

  # This is where we'll be managing the infrastructure using terraform.
  infra:
    runs-on: self-hosted
    if: false #TODO reinstate

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/${{ env.AWS_ROLE }}
          role-session-name: GithubActions-${{ env.REPO_NAME }}-${{ github.workflow }}-${{ github.run_id }}

      - name: Plan IaC
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: terraform
          tg_command: plan

      - name: Apply IaC
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: terraform
          tg_command: apply

  release:
    name: Release
    runs-on: ubuntu-latest  # Lighter job can use standard runner
    timeout-minutes: 15
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # Fetch entire history to e.g. get tags

      - name: Get latest tag
        id: get-latest-tag
        run: |
          chmod +x .github/scripts/release/0-get-latest-tag.sh
          .github/scripts/release/0-get-latest-tag.sh
          cat $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump-type
        run: |
          chmod +x .github/scripts/release/1-determine-bump-type.sh
          .github/scripts/release/1-determine-bump-type.sh
          cat $GITHUB_OUTPUT

      - name: Bump version
        if: steps.bump-type.outputs.BUMP_TYPE != 'none'
        id: bump-version
        run: |
          chmod +x .github/scripts/release/2-bump-version.sh
          .github/scripts/release/2-bump-version.sh "${{ steps.get-latest-tag.outputs.LATEST_TAG }}" "${{ steps.bump-type.outputs.BUMP_TYPE }}"
          cat $GITHUB_OUTPUT

      - name: Generate Release Notes
        if: steps.bump-type.outputs.BUMP_TYPE != 'none'
        id: release_notes
        shell: bash
        run: |
          chmod +x .github/scripts/release/3-generate-release-notes.sh
          .github/scripts/release/3-generate-release-notes.sh

      - name: Create and push tag
        if: steps.bump-type.outputs.BUMP_TYPE != 'none'
        run: |
          chmod +x .github/scripts/release/4-create-tag.sh
          .github/scripts/release/4-create-tag.sh "${{ steps.bump-version.outputs.NEW_VERSION }}"
          cat $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.bump-type.outputs.BUMP_TYPE != 'none'
        uses: softprops/action-gh-release@v2
        with:
          body_path: ./release-notes.md
          tag_name: ${{ steps.bump-version.outputs.NEW_VERSION }}
          repository: ${{ github.repository }}
          token: ${{ env.GITHUB_TOKEN }}

      - name: Setup Debug Session
        if: failure()
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true
          limit-access-to-actor: true
